#========= どのように画像表示するか ==========(3,6,1)
#MNIST
import sys
sys.path.append('../')
from dataset.mnist import load_mnist #load_mnist関数の呼び出し
import numpy as np
(x_train, t_train), (x_test, t_test) = \
  load_mnist(flatten=True, normalize=False)

from PIL import Image #画像表示にはPILモジュールを使う。
def img_show(img):
  pil_img = Image.fromarray(np.uint8(img))
  pil_img.show()
img = x_test[4]
print(img)
print(img.shape)
print(type(img))

#-------------------画像の出力 --------------------
img = img.reshape(28, 28) #画像のサイズ(28*28)
# print(“img.shape2”, img.shape) #28*28
# img_show(img)
# myImg = np.array(Image.open('../dataset/9.png'))
# print(type(myImg))
# print(myImg)
# myImg = np.ravel(myImg)
# print(myImg)
# print(type(myImg))
# print(myImg.ndim)
# print(myImg.shape)
# img = myImg.reshape(28, 28) #画像のサイズ(28*28)
# # print(“img.shape2", img.shape) #28*28
# img_show(img)



testImage = \
[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,5,89,156,156,217,208,71,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,5,76,253,253,253,254,253,241,199,27,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,59,253,253,253,253,254,253,253,253,193,31,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,53,127,253,253,231,101,79,164,253,253,253,219,21,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,173,254,253,222,34,0,0,20,253,253,253,254,114,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,100,254,255,234,0,0,0,0,16,236,254,254,255,136,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,182,253,226,88,0,0,0,0,17,211,253,253,254,227,36,0,0,0,0,0,0,0],
[0,0,0,0,0,25,240,253,195,0,0,0,0,0,147,253,253,253,254,253,78,0,0,0,0,0,0,0],
[0,0,0,0,0,79,253,253,195,0,0,7,24,159,250,253,253,253,254,253,78,0,0,0,0,0,0,0],
[0,0,0,0,0,18,238,253,218,23,98,197,230,254,253,253,253,253,254,253,78,0,0,0,0,0,0,0],
[0,0,0,0,0,0,137,254,255,254,254,254,254,255,254,235,83,240,255,254,78,0,0,0,0,0,0,0],
[0,0,0,0,0,0,36,173,254,253,253,253,253,219,91,27,19,222,254,253,78,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,155,253,253,210,137,30,0,0,40,253,254,253,78,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,5,19,19,9,0,0,0,0,40,253,254,242,36,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,253,254,233,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,254,255,234,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,253,254,150,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,253,254,135,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,253,254,83,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,155,193,24,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

testImage = np.array(testImage)
testImage = testImage.reshape(1,784)
print(testImage)
print(testImage.shape)
img = testImage.reshape(28, 28) #画像のサイズ(28*28)
# print(“img.shape2", img.shape) #28*28
img_show(img)
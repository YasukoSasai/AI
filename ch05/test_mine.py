#========= (誤差逆伝播を使った)学習=============(5.7.4)
#２層ニューラルネットワークのクラス
import sys
sys.path.append('../')
import numpy as np
import matplotlib.pyplot as plt
from dataset.mnist import load_mnist
from one_layer import TwoLayerNet
from PIL import Image 
# ================== ミニバッチ学習の実装 ==================
(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)
# ================== ディープラーニングのモデルを定義 ==================
network = TwoLayerNet(input_size=784, hidden_size=10, output_size=10) #NNのインスタンス生成
#====== ハイパーパラメータ ======
iters_num = 10000 #勾配によるパラメータ更新回数(iterarion = 繰り返し)
train_size = x_train.shape[0] #訓練データのサイズはx_trainデータ形状の0次元の数 = 60000枚　
batch_size = 1000 #60000枚のうち100枚ごと学習を行う
learning_rate = 0.1 
train_loss_list = [] 
train_acc_list = [] #学習における正確率
test_acc_list = [] #テストにおける正確率
iter_per_epoch = max(train_size / batch_size, 1) #1エポックあたりの学習回数　
# ======== 学習フェーズ =============
print("======= 学習開始 ==========")
#開始時間取得
for i in range (iters_num): #10000回繰り返し
    #===== ミニバッチの取得 =====
    batch_mask = np.random.choice(train_size, batch_size) #train_size枚の中からbatch_size枚ランダムで配列で取り出す
    x_batch = x_train[batch_mask] #100個の入力画像
    t_batch = t_train[batch_mask] #100個の入力画像に対する正解データ
    #====== 勾配計算 ===== 
    grad = network.gradient(x_batch, t_batch)
    #====== パラメータ更新 ======
    for key in ('W1', 'b1'):
        network.params[key] -= learning_rate * grad[key]
    #====== 学習経過の記録 ========
    # loss = network.loss(x_batch, t_batch)
    # train_loss_list.append(loss)
#終了時間取得
#print(終了ー開始)
#======= テスト開始 ==========
print("======= テスト開始 ==========")
#開始時間取得
# test_size = x_test.shape[0]
# batch_mask = np.random.choice(test_size, 10) #train_size枚の中からbatch_size枚ランダムで配列で取り出す
# x_test = x_test[batch_mask] #100個の入力画像
# t_test = t_test[batch_mask] #100個の入力画像に対する正解データ

#今回使うテストデータ（自作）
testImage = \
[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
testImage = np.array(testImage)
testImage = testImage.reshape(1,784)
x_test = testImage

t_test = np.array([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0])
t_test = t_test.reshape(1,10)

#テストにおける精度
test_acc = network.accuracy(x_test, t_test)
test_acc_list.append(test_acc)
#終了時間取得
#print(終了ー開始)
print("test acc: "+ str(test_acc))

#============== 画像表示 =============
def ConvertToImg(img):
    return Image.fromarray(np.uint8(img))
# MNIST一文字の幅
chr_w = 28
# MNIST一文字の高さ
chr_h = 28
# 表示する文字数
num = 20
# MNISTの文字をPILで１枚の画像に描画する
canvas = Image.new('RGB', (int(chr_w * num/2), int(chr_h * num/2)), (255, 255, 255))
# MNISTの文字を読み込んで描画
i = 0
(x_train, t_train), (x_test, t_test) = \
  load_mnist(flatten=True, normalize=False)

def img_show(img):
  pil_img = Image.fromarray(np.uint8(img))
  pil_img.show()
print(testImage.shape)
img = testImage.reshape(28, 28) #画像のサイズ(28*28)
# print(“img.shape2", img.shape) #28*28
img_show(img)

